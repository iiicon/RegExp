// 正则表达式的拆分

// js 正则中的结构：
// 字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。

// 涉及的操作符：
/**
 * 转义符 \
 * 括号和方括号 () []
 * 量词限定符 {} + * ?
 * 位置和序列 ^ $ \元字符 \一般字符
 * 管道符 |
 */

// 元字符
// ^ $ . [] {} () + - * ? : ! | \ / , =
// 当匹配这些字符本身时，一律可以转义，有些情况下可以不用转义，在这里不一一说明
{
  const string = "^$.*+?|\\/()[]{}=!:-,";
  const reg = /\^\$\.\*\+\?\|\\\/\(\)\[\]\{\}\=\!\:\-\,/;
  // console.log(reg.test(string)); // true
}

// 案例分析
{
  // 身份证正则
  const reg = /^\d{15}|\d{17}[\dxX]$/;
  // console.log(reg.test('142431199203091011')) // true
}

{
  // IPV4的地址
  const reg = /^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$/;
}

// 小结：
// 竖杠的优先级最低，即最后运算
// 当自己不确定与否时，尽管去转义，总之是不会错的
